openapi: 3.0.2

info:
  title: "Chat Bot - API"
  version: "1"

tags:
  - name: Auth
    description: Endpoints for ChatBot API login.
  - name: User
    description: Endpoints for ChatBot API CRUD.
  - name: Model
    description: Endpoints for ChatBot API model train and monitor.
  - name: Search
    description: Endpoints for ChatBot model answer.
  - name: Chat
    description: Endpoints for Chat management.

paths:
  /app_auth/login/:
    post:
      tags:
        - Auth
      summary: Login and obtain JWT token pair for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "madruga@chaves.com"
                password:
                  type: string
                  example: "123456789Ma-"
              required:
                - email
                - password
      responses:
        "200":
          description: Login successfull, JWT token pair generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_auth/logout/:
    post:
      security:
        - BearerAuth: []
      tags:
        - Auth
      summary: Logout and blacklist refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  example: "Refresh token generated on login endpoint."
      responses:
        "204":
          description: Successfully logged out
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_auth/token/refresh/:
    post:
      tags:
        - Auth
      summary: Refresh JWT token for new Access Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  example: "Refresh token generated on login endpoint."
      responses:
        "200":
          description: New JWT token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/list/users/:
    get:
      summary: List all users present on database
      operationId: listUsers
      tags:
        - User
      responses:
        "200":
          description: user list fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
        - BearerAuth: []

  /user/create/:
    post:
      summary: Create a new user on database
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: User created sucessfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

  /user/read/:
    get:
      summary: Retrieve current user data
      operationId: getUser
      tags:
        - User
      responses:
        "200":
          description: user by id returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
        - BearerAuth: []

  /user/update/:
    put:
      summary: Update current user data
      operationId: updateUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated sucessfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
        - BearerAuth: []

  /user/delete/:
    delete:
      summary: Delete current user
      operationId: deleteUser
      tags:
        - User
      responses:
        "204":
          description: User deleted sucessfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
        - BearerAuth: []

  /app_model/train/model/:
    post:
      security:
        - BearerAuth: []
      summary: Start downloading HuggingFace dataset and train NLP model
      operationId: trainModel
      tags:
        - Model
      responses:
        "201":
          description: "Download and train started."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_model/monitor/training/:
    post:
      summary: Training model monitor
      operationId: monitorTraining
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: string
                  example: "Celery task_id returned on /models/train/model/ endpoint if the data is in the correct format"
      responses:
        "200":
          description: current model training status returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        "404":
          description: "No task found for this task_id."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
        - BearerAuth: []

  /app_model/search/information/:
    post:
      security:
        - BearerAuth: []
      summary: Send question or sentence to obtain an answer from NLP model
      operationId: askModel
      tags:
        - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  example: "Which is the best programming language?"
      responses:
        '200':
          description: query on trained model returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result_1:
                    type: object
                    properties:
                      content:
                        type: string
                      similarity:
                        type: int
                  result_2:
                    type: object
                    properties:
                      content:
                        type: string
                      similarity:
                        type: int
                  result_3:
                    type: object
                    properties:
                      content:
                        type: string
                      similarity:
                        type: int
              example:
                result_1:
                  content: "This is some example content for result 1."
                  similarity: 0.5700613555953692
                result_2:
                  content: "This is some example content for result 2."
                  similarity: 0.33197371310011686
                result_3:
                  content: "This is some example content for result 3."
                  similarity: 0.2817058248812313
        '400':
          description: "Requisition error. No sentence provided."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: "Requisition error. Model and/or embeddings not created."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
            $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalError'

  /app_model/chat/create/:
    post:
      security:
        - BearerAuth: []
      summary: Create a new chat with AI
      operationId: createChat
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewChat"
      responses:
        "201":
          description: Chat created sucessfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_model/chat/list/:
    get:
      security:
        - BearerAuth: []
      summary: List all chats
      operationId: listChat
      tags:
        - Chat
      responses:
        "200":
          description: Chat list fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_model/chat/{id}/delete/:
    delete:
      security:
        - BearerAuth: []
      summary: Delete a chat by ID
      operationId: deleteChat
      tags:
        - Chat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: "Chat id number on database."
      responses:
        "204":
          description: Chat deleted sucessfully.
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_model/message/{id}/create/:
    post:
      security:
        - BearerAuth: []
      summary: Create a new message on database
      operationId: createMessage
      tags:
        - Chat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: "Chat id number on database."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMessage"
      responses:
        "201":
          description: Message created sucessfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalError"

  /app_model/message/{id}/list/:
    get:
      security:
        - BearerAuth: []
      summary: List all messages of a chat
      operationId: listMessage
      tags:
        - Chat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: "Chat id number on database"
      responses:
        "200":
          description: Message list fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string

    NewUser:
      type: object
      properties:
        first_name:
          type: string
          example: "First name for register."
        last_name:
          type: string
          example: "Last name for register."
        email:
          type: string
          example: "User email for register."
        password:
          type: string
          example: "User password for register."

    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
          example: "First name for update."
        last_name:
          type: string
          example: "Last name for update."
        email:
          type: string
          example: "User email for update."

    Chat:
      type: object
      properties:
        id:
          type: integer
        chat_name:
          type: string
        user_id:
          type: integer
        created_at:
          type: string
        
    NewChat:
      type: object
      properties:
        chat_name:
          type: string
          example: "Programming language query"

    Message:
      type: object
      properties:
        id:
          type: integer
        chat_id:
          type: string
        is_user:
          type: boolean
        text:
          type: string
        created_at:
          type: string

    NewMessage:
      type: object
      properties:
        text:
          type: string
          example: "Which is the best programming language?"
        is_user:
          type: boolean
          example: True

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: The request requires user a login and authentication.
      content:
        application/json:
          example:
            error: "Authentication credentials were not provided."

    NotFound:
      description: User not found on database by passed id.
      content:
        application/json:
          example:
            error: "Not found."

    ValidationError:
      description: User validation failed, some field can be missing or has incorrect data.
      content:
        application/json:
          example:
            error: "Invalid input."

    ForbiddenError:
      description: User validated but has no permission for current functionality.
      content:
        application/json:
          example:
            error: "No permission."

    InternalError:
      description: Server internal error, please see the saved log on LogSystem table at the database.
      content:
        application/json:
          example:
            error: "Internal error."
